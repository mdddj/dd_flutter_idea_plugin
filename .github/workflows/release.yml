name: Build and Release Plugin

on:
  push:
    tags:
      - 'v*'  # 当推送以 v 开头的 tag 时触发，如 v1.0.0

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整历史记录用于生成变更日志
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
    
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Get tag version
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Update plugin version in gradle.properties
      run: |
        sed -i "s/pluginVersion=.*/pluginVersion=${{ steps.get_version.outputs.version }}./" gradle.properties
        cat gradle.properties
      working-directory: dd_flutter_idea_plugin
    
    - name: Update CHANGELOG.md
      run: |
        python3 scripts/update-changelog.py update ${{ steps.get_version.outputs.version }}
        echo "Updated CHANGELOG.md:"
        head -10 CHANGELOG.md
      working-directory: dd_flutter_idea_plugin
    
    - name: Make gradlew executable
      run: chmod +x gradlew
      working-directory: dd_flutter_idea_plugin
    
    - name: Build plugin
      run: |
        ./gradlew buildPlugin --no-daemon --stacktrace
      working-directory: dd_flutter_idea_plugin
      env:
        GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx2048m -XX:MaxMetaspaceSize=512m"
    
    - name: Find built plugin
      id: find_plugin
      run: |
        PLUGIN_FILE=$(find build/distributions -name "*.zip" | head -1)
        if [ -z "$PLUGIN_FILE" ]; then
          echo "No plugin file found!"
          exit 1
        fi
        echo "plugin_file=$PLUGIN_FILE" >> $GITHUB_OUTPUT
        echo "plugin_name=$(basename $PLUGIN_FILE)" >> $GITHUB_OUTPUT
        echo "Found plugin: $PLUGIN_FILE"
      working-directory: dd_flutter_idea_plugin
    
    - name: Generate release notes
      id: release_notes
      run: |
        # 创建发布说明
        cat > release_notes.md << 'EOF'
        ## FlutterX Plugin Release ${{ steps.get_version.outputs.tag_name }}
        
        ### Installation
        Download the plugin zip file and install it manually in IntelliJ IDEA/Android Studio
        1. Go to File -> Settings -> Plugins
        2. Click the gear icon and select Install Plugin from Disk
        3. Choose the downloaded zip file
        
        ### Changelog
        EOF
        
        # 提取当前版本的变更日志
        python3 scripts/update-changelog.py extract ${{ steps.get_version.outputs.version }} --output release_notes.md
        
        echo "Generated release notes:"
        cat release_notes.md
      working-directory: dd_flutter_idea_plugin
    
    - name: Commit and push changelog
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add CHANGELOG.md gradle.properties
        git commit -m "chore: update changelog and version for release ${{ steps.get_version.outputs.tag_name }}" || echo "No changes to commit"
        git push origin HEAD:main || echo "Nothing to push"
      working-directory: dd_flutter_idea_plugin
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_version.outputs.tag_name }}
        name: FlutterX Plugin ${{ steps.get_version.outputs.tag_name }}
        body_path: dd_flutter_idea_plugin/release_notes.md
        files: |
          dd_flutter_idea_plugin/${{ steps.find_plugin.outputs.plugin_file }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Upload to Release Assets
      uses: actions/upload-artifact@v4
      with:
        name: flutterx-plugin-${{ steps.get_version.outputs.version }}
        path: dd_flutter_idea_plugin/${{ steps.find_plugin.outputs.plugin_file }}
        retention-days: 30
    
    - name: Plugin Verification
      run: |
        echo "✅ Plugin built successfully!"
        echo "📁 Plugin file: ${{ steps.find_plugin.outputs.plugin_name }}"
        echo "🏷️ Version: ${{ steps.get_version.outputs.version }}"
        echo "📦 Release created: https://github.com/${{ github.repository }}/releases/tag/${{ steps.get_version.outputs.tag_name }}"
      working-directory: dd_flutter_idea_plugin