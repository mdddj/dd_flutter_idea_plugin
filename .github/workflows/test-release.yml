name: Test Release Workflow (for act)

on:
  push:
    tags:
      - 'test-v*'  # 使用 test-v 前缀避免与真实发布冲突
  workflow_dispatch:  # 允许手动触发
    inputs:
      version:
        description: 'Test version number'
        required: true
        default: '1.0.0'

jobs:
  test-build-and-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
    
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Get version from input or tag
      id: get_version
      run: |
        if [ "${{ github.event.inputs.version }}" != "" ]; then
          VERSION="${{ github.event.inputs.version }}"
          TAG_NAME="test-v$VERSION"
        else
          VERSION=${GITHUB_REF#refs/tags/test-v}
          TAG_NAME=${GITHUB_REF#refs/tags/}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "Testing with version: $VERSION"
        echo "Testing with tag: $TAG_NAME"
    
    - name: Create test backup of files
      run: |
        cp gradle.properties gradle.properties.backup
        cp CHANGELOG.md CHANGELOG.md.backup
      working-directory: dd_flutter_idea_plugin
    
    - name: Update plugin version in gradle.properties (test)
      run: |
        echo "Original gradle.properties:"
        cat gradle.properties
        echo "---"
        sed -i "s/pluginVersion=.*/pluginVersion=${{ steps.get_version.outputs.version }}./" gradle.properties
        echo "Updated gradle.properties:"
        cat gradle.properties
      working-directory: dd_flutter_idea_plugin
    
    - name: Update CHANGELOG.md (test)
      run: |
        echo "Original CHANGELOG.md (first 20 lines):"
        head -20 CHANGELOG.md
        echo "---"
        
        python3 scripts/update-changelog.py update ${{ steps.get_version.outputs.version }} --test
        
        echo "Updated CHANGELOG.md (first 20 lines):"
        head -20 CHANGELOG.md
      working-directory: dd_flutter_idea_plugin
    
    - name: Make gradlew executable
      run: chmod +x gradlew
      working-directory: dd_flutter_idea_plugin
    
    - name: Test build plugin
      run: |
        echo "Starting plugin build..."
        ./gradlew buildPlugin --no-daemon --stacktrace --info
        echo "Build completed!"
      working-directory: dd_flutter_idea_plugin
      env:
        GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx2048m -XX:MaxMetaspaceSize=512m"
    
    - name: Find built plugin
      id: find_plugin
      run: |
        echo "Looking for built plugin files..."
        find build/distributions -name "*.zip" -type f || echo "No zip files found yet"
        
        PLUGIN_FILE=$(find build/distributions -name "*.zip" | head -1)
        if [ -z "$PLUGIN_FILE" ]; then
          echo "No plugin file found! Listing build directory:"
          find build -type f -name "*.zip" || echo "No zip files found in entire build directory"
          ls -la build/distributions/ || echo "distributions directory not found"
          exit 1
        fi
        echo "plugin_file=$PLUGIN_FILE" >> $GITHUB_OUTPUT
        echo "plugin_name=$(basename $PLUGIN_FILE)" >> $GITHUB_OUTPUT
        echo "Found plugin: $PLUGIN_FILE"
        
        # Show file info
        ls -lh "$PLUGIN_FILE"
      working-directory: dd_flutter_idea_plugin
    
    - name: Generate test release notes
      id: release_notes
      run: |
        VERSION="${{ steps.get_version.outputs.version }}"
        
        cat > release_notes.md << 'EOF'
        ## TEST RELEASE - FlutterX Plugin ${{ steps.get_version.outputs.tag_name }}
        
        This is a test release generated by act for CI/CD testing purposes.
        
        ### Installation Test
        This would normally provide installation instructions.
        
        ### Changelog Test
        EOF
        
        # 提取当前版本的变更日志
        python3 scripts/update-changelog.py extract ${{ steps.get_version.outputs.version }} --output release_notes.md
        
        echo "Generated test release notes:"
        cat release_notes.md
      working-directory: dd_flutter_idea_plugin
    
    - name: Simulate git operations (test)
      run: |
        echo "🧪 TEST MODE: Simulating git operations"
        echo "Would commit files: CHANGELOG.md gradle.properties"
        echo "Would create commit: 'chore: update changelog and version for release ${{ steps.get_version.outputs.tag_name }}'"
        echo "Would push to origin main"
        
        echo "Git status:"
        git status --porcelain
        
        echo "Git diff for gradle.properties:"
        git diff gradle.properties || echo "No changes in gradle.properties"
        
        echo "Git diff for CHANGELOG.md:"
        git diff CHANGELOG.md | head -20 || echo "No changes in CHANGELOG.md"
      working-directory: dd_flutter_idea_plugin
    
    - name: Simulate GitHub Release creation (test)
      run: |
        echo "🧪 TEST MODE: Would create GitHub Release"
        echo "Tag: ${{ steps.get_version.outputs.tag_name }}"
        echo "Name: FlutterX Plugin ${{ steps.get_version.outputs.tag_name }}"
        echo "Plugin file: ${{ steps.find_plugin.outputs.plugin_file }}"
        echo "Plugin name: ${{ steps.find_plugin.outputs.plugin_name }}"
        echo "Release notes file: release_notes.md"
        
        echo "Release notes content:"
        echo "========================"
        cat release_notes.md
      working-directory: dd_flutter_idea_plugin
    
    - name: Test verification and cleanup
      run: |
        echo "✅ Test completed successfully!"
        echo "📁 Plugin file: ${{ steps.find_plugin.outputs.plugin_name }}"
        echo "🏷️ Version: ${{ steps.get_version.outputs.version }}"
        echo "📦 Tag: ${{ steps.get_version.outputs.tag_name }}"
        
        echo ""
        echo "🧹 Restoring original files..."
        mv gradle.properties.backup gradle.properties
        mv CHANGELOG.md.backup CHANGELOG.md
        
        echo "✅ Files restored to original state"
        echo ""
        echo "📊 Build artifacts available in: build/distributions/"
        ls -la build/distributions/ || echo "No distributions directory"
      working-directory: dd_flutter_idea_plugin
    
    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-plugin-${{ steps.get_version.outputs.version }}
        path: |
          dd_flutter_idea_plugin/${{ steps.find_plugin.outputs.plugin_file }}
          dd_flutter_idea_plugin/release_notes.md
        retention-days: 1