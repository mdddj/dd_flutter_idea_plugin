/*
 * Copyright (c) 2015, the Dart project authors.
 *
 * Licensed under the Eclipse Public License v1.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
package vm.element

// This file is generated by the script: pkg/vm_service/tool/generate.dart in dart-lang/sdk.

import com.google.gson.JsonObject

/**
 * 请参阅 getCpuSamples 和 CpuSamples。
 */
class CpuSample(json: JsonObject) : Element(json) {

    /**
     * 与 HeapSnapshot.classes 中的类索引匹配。为从 getAllocationTraces() 返回的 CpuSample 实例提供。
     *
     * 可以返回 <code>null</code>。
     */
    fun getClassId(): Int? {
        return getAsInt("classId")
    }

    /**
     * 此样本的 CPU 滴答时间戳（以微秒为单位）。
     *
     * 如果启用了 vm.timelineStreams['Dart']['live'] 流，则提供。必须启用 'Dart' 时间线流才能接收流中的事件，并且必须启用 'live' 时间线流才能接收事件中的 CPU 样本。
     */
    fun getTimestamps(): List<Int> {
        return getListInt("timestamps")!!
    }

    /**
     * 收集此样本时的调用堆栈。堆栈应从上到下解释。此数组中的每个元素都是 `CpuSamples` 中 `functions` 数组的键。
     *
     * 示例：
     *
     * `functions[stack[0]] = @Function(bar())` `functions[stack[1]] = @Function(foo())`
     * `functions[stack[2]] = @Function(main())`
     */
    fun getStack(): List<Int> {
        return getListInt("stack")
    }

    /**
     * 收集此样本的线程的线程 ID。
     */
    fun getTid(): Int {
        return getAsInt("tid")
    }

    /**
     * 收集此样本的时间（以微秒为单位）。
     */
    fun getTimestamp(): Long {
        return if (json.get("timestamp") == null) -1 else json.get("timestamp").asLong
    }

    /**
     * 如果样本的堆栈被截断，则提供并设置为 true。如果堆栈比 `CpuSamples` 响应中的 `stackDepth` 更深，则可能发生这种情况。
     *
     * 可以返回 <code>null</code>。
     */
    fun getTruncated(): Boolean? {
        return getAsBoolean("truncated")
    }

    /**
     * 收集此样本时设置的用户标签的名称。如果收集此样本时未设置用户标签，则省略。
     *
     * 可以返回 <code>null</code>。
     */
    fun getUserTag(): String? {
        return getAsString("userTag")
    }

    /**
     * 收集此样本时设置的 VM 标签的名称。如果样本的 VM 标签不被视为有效，则省略。
     *
     * 可以返回 <code>null</code>。
     */
    fun getVmTag(): String? {
        return getAsString("vmTag")
    }
}
