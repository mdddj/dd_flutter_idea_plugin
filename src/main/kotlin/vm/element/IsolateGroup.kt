/*
 * Copyright (c) 2015, the Dart project authors.
 *
 * Licensed under the Eclipse Public License v1.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
package vm.element

// This file is generated by the script: pkg/vm_service/tool/generate.dart in dart-lang/sdk.

import com.google.gson.JsonArray
import com.google.gson.JsonObject

/**
 * {@link IsolateGroup} 是共享堆的一组 isolate。
 */
class IsolateGroup(json: JsonObject) : VMRef(json) {

    /**
     * 此 isolate 组中所有 isolate 的列表。
     *
     * 当 IsolateGroupRunnable 事件触发时保证已初始化。
     */
    fun getIsolates(): ElementList<IsolateRef> {
        return object : ElementList<IsolateRef>(json.get("isolates").asJsonArray) {
            override fun basicGet(array: JsonArray, index: Int): IsolateRef {
                return IsolateRef(array.get(index).asJsonObject)
            }
        }
    }

    /**
     * 标识此 isolate 组的名称。不保证唯一。
     */
    override fun getName(): String {
        return getAsString("name")!!
    }

    /**
     * 此 isolate 组的数字 ID，表示为字符串。唯一。
     */
    fun getNumber(): String {
        return getAsString("number")!!
    }

    /**
     * 此 isolate 组的根库。
     *
     * 可以返回 <code>null</code>。
     */
    fun getRootLib(): LibraryRef? {
        val obj = json.get("rootLib")?.asJsonObject ?: return null
        val type = json.get("type")?.asString
        if ("Instance" == type || "@Instance" == type) {
            val kind = json.get("kind")?.asString
            if ("Null" == kind) return null
        }
        return LibraryRef(obj)
    }
}
