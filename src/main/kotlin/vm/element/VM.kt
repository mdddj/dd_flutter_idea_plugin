/*
 * Copyright (c) 2015, the Dart project authors.
 *
 * Licensed under the Eclipse Public License v1.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
package vm.element

// This file is generated by the script: pkg/vm_service/tool/generate.dart in dart-lang/sdk.

import com.google.gson.JsonArray
import com.google.gson.JsonObject

class VM(json: JsonObject) : Response(json) {

    /**
     * 目标架构上的字长（例如 32, 64）。
     */
    fun getArchitectureBits(): Int {
        return getAsInt("architectureBits")
    }

    /**
     * 我们实际运行的 CPU。
     */
    fun getHostCPU(): String? {
        return getAsString("hostCPU")
    }

    /**
     * 在 VM 中运行的隔离组列表。
     */
    fun getIsolateGroups(): ElementList<IsolateGroupRef> {
        return object : ElementList<IsolateGroupRef>(json.get("isolateGroups").asJsonArray) {
            override fun basicGet(array: JsonArray, index: Int): IsolateGroupRef {
                return IsolateGroupRef(array.get(index).asJsonObject)
            }
        }
    }

    /**
     * 在 VM 中运行的隔离列表。
     */
    fun getIsolates(): ElementList<IsolateRef> {
        return object : ElementList<IsolateRef>(json.get("isolates").asJsonArray) {
            override fun basicGet(array: JsonArray, index: Int): IsolateRef {
                return IsolateRef(array.get(index).asJsonObject)
            }
        }
    }

    /**
     * 标识此 vm 的名称。不保证是唯一的。
     */
    fun getName(): String? {
        return getAsString("name")
    }

    /**
     * 我们正在运行的操作系统。
     */
    fun getOperatingSystem(): String? {
        return getAsString("operatingSystem")
    }

    /**
     * VM 的进程 ID。
     */
    fun getPid(): Int {
        return getAsInt("pid")
    }

    /**
     * VM 启动的时间，以纪元以来的毫秒数表示。
     *
     * 适合传递给 DateTime.fromMillisecondsSinceEpoch。
     */
    fun getStartTime(): Int {
        return getAsInt("startTime")
    }

    /**
     * 包含在 VM 中运行的系统隔离的隔离组列表。
     */
    fun getSystemIsolateGroups(): ElementList<IsolateGroupRef> {
        return object : ElementList<IsolateGroupRef>(json.get("systemIsolateGroups").asJsonArray) {
            override fun basicGet(array: JsonArray, index: Int): IsolateGroupRef {
                return IsolateGroupRef(array.get(index).asJsonObject)
            }
        }
    }

    /**
     * 在 VM 中运行的系统隔离列表。
     */
    fun getSystemIsolates(): ElementList<IsolateRef> {
        return object : ElementList<IsolateRef>(json.get("systemIsolates").asJsonArray) {
            override fun basicGet(array: JsonArray, index: Int): IsolateRef {
                return IsolateRef(array.get(index).asJsonObject)
            }
        }
    }

    /**
     * 我们正在为其生成代码的 CPU。
     */
    fun getTargetCPU(): String? {
        return getAsString("targetCPU")
    }

    /**
     * Dart VM 版本字符串。
     */
    fun getVersion(): String? {
        return getAsString("version")
    }
}
