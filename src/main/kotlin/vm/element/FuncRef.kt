/*
 * Copyright (c) 2015, the Dart project authors.
 *
 * Licensed under the Eclipse Public License v1.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
package vm.element

// This file is generated by the script: pkg/vm_service/tool/generate.dart in dart-lang/sdk.

import com.google.gson.JsonElement
import com.google.gson.JsonObject

/**
 * {@link FuncRef} 是对 {@link Func} 的引用。
 */
class FuncRef(json: JsonObject) : ObjRef(json) {

    /**
     * 这个函数是隐式定义的吗（例如，隐式 getter/setter）？
     */
    fun getImplicit(): Boolean {
        return getAsBoolean("implicit")
    }

    /**
     * 此函数在源代码中的位置。
     *
     * 注意：如果这是来自 mixin 应用、表达式求值、修补类等的函数，则可能与 `owner` 的位置不一致。
     *
     * 可以返回 <code>null</code>。
     */
    fun getLocation(): SourceLocation? {
        val obj = json.get("location")?.asJsonObject ?: return null
        val type = json.get("type")?.asString
        if ("Instance" == type || "@Instance" == type) {
            val kind = json.get("kind")?.asString
            if ("Null" == kind) return null
        }
        return SourceLocation(obj)
    }


    /**
     * 此函数的所有者，可以是 Library、Class 或 Function。
     *
     * 注意：如果这是来自 mixin 应用、表达式求值、修补类等的函数，则 `owner` 的位置可能与 `location` 不一致。
     *
     * @return <code>LibraryRef</code>、<code>ClassRef</code> 或 <code>FuncRef</code> 之一
     */
    fun getOwner(): Any? {
        val elem = json.get("owner") ?: return null

        if (elem.isJsonObject) {
            val o = elem.asJsonObject
            when (o.get("type")?.asString) {
                "@Library" -> return LibraryRef(o)
                "@Class" -> return ClassRef(o)
                "@Func" -> return FuncRef(o)
            }
        }
        return null
    }

    /**
     * 这个函数是抽象方法吗？
     */
    fun isAbstract(): Boolean {
        return getAsBoolean("abstract")
    }

    /**
     * 这个函数是 const 吗？
     */
    fun isConst(): Boolean {
        return getAsBoolean("const")
    }

    /**
     * 这个函数是 static 吗？
     */
    fun isStatic(): Boolean {
        return getAsBoolean("static")
    }
}
