/*
 * Copyright (c) 2015, the Dart project authors.
 *
 * Licensed under the Eclipse Public License v1.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
package vm.element

// This file is generated by the script: pkg/vm_service/tool/generate.dart in dart-lang/sdk.

import com.google.gson.JsonElement
import com.google.gson.JsonObject

/**
 * {@link Field} 提供有关 Dart 语言字段或变量的信息。
 */
class Field(json: JsonObject) : Obj(json) {

    /**
     * 此字段的声明类型。
     *
     * 该值始终是以下类型之一：Type、TypeRef、TypeParameter、BoundedType。
     */
    fun getDeclaredType(): InstanceRef {
        return InstanceRef(json.get("declaredType").asJsonObject)
    }

    /**
     * 此字段在源代码中的位置。
     *
     * 注意：如果这是来自 mixin 应用、修补类等的字段，则可能与 `owner` 的位置不一致。
     *
     * 可以返回 <code>null</code>。
     */
    fun getLocation(): SourceLocation? {
        val obj = json.get("location")?.asJsonObject ?: return null
        val type = json.get("type")?.asString
        if ("Instance" == type || "@Instance" == type) {
            val kind = json.get("kind")?.asString
            if ("Null" == kind) return null
        }
        return SourceLocation(obj)
    }

    /**
     * 此字段的名称。
     */
    fun getName(): String {
        return getAsString("name")!!
    }

    /**
     * 此字段的所有者，可以是 Library 或 Class。
     *
     * 注意：如果这是来自 mixin 应用、修补类等的字段，则 `owner` 的位置可能与 `location` 不一致。
     */
    fun getOwner(): ObjRef {
        return ObjRef(json.get("owner").asJsonObject)
    }

    /**
     * 如果字段是静态的，则为此字段的值。如果未初始化，则将采用未初始化的 Sentinel 的值。
     *
     * @return <code>InstanceRef</code> 或 <code>Sentinel</code> 之一
     *
     * 可以返回 <code>null</code>。
     */
    fun getStaticValue(): InstanceRef? {
        val elem = json.get("staticValue") ?: return null
        if (!elem.isJsonObject) return null
        val child = elem.asJsonObject
        val type = child.get("type")?.asString
        if ("Sentinel" == type) return null
        return InstanceRef(child)
    }

    /**
     * 这个字段是 const 吗？
     */
    fun isConst(): Boolean {
        return getAsBoolean("const")
    }

    /**
     * 这个字段是 final 吗？
     */
    fun isFinal(): Boolean {
        return getAsBoolean("final")
    }

    /**
     * 这个字段是 static 吗？
     */
    fun isStatic(): Boolean {
        return getAsBoolean("static")
    }
}
