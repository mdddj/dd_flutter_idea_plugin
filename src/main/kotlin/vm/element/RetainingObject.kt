/*
 * Copyright (c) 2015, the Dart project authors.
 *
 * Licensed under the Eclipse Public License v1.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
package vm.element

// This file is generated by the script: pkg/vm_service/tool/generate.dart in dart-lang/sdk.

import com.google.gson.JsonElement
import com.google.gson.JsonObject
import com.google.gson.JsonPrimitive

/**
 * 请参见 RetainingPath。
 */
class RetainingObject(json: JsonObject) : Element(json) {

    /**
     * 如果 `value` 是非 List、非 Map 对象，则 `parentField` 是包含
     * 保留路径上先前对象的字段的名称。
     *
     * @return <code>String</code> 或 <code>int</code> 之一
     *
     * 可以返回 <code>null</code>。
     */
    fun getParentField(): Any? {
        val elem = json.get("parentField")
        if (elem == null) return null

        if (elem.isJsonPrimitive) {
            val p = elem as JsonPrimitive
            if (p.isString) return p.asString
            if (p.isNumber) return p.asInt
        }
        return null
    }

    /**
     * 如果 `value` 是 List，则 `parentListIndex` 是保留路径上先前对象所在的索引（已弃用）。
     *
     * 注意：此属性已弃用，将被 `parentField` 替代。
     *
     * 可以返回 <code>null</code>。
     */
    fun getParentListIndex(): Int {
        return getAsInt("parentListIndex")
    }

    /**
     * 如果 `value` 是 Map，则 `parentMapKey` 是映射到保留路径上先前对象的键。
     *
     * 可以返回 <code>null</code>。
     */
    fun getParentMapKey(): ObjRef? {
        val obj = json.get("parentMapKey")?.asJsonObject ?: return null
        val type = json.get("type")?.asString ?: return ObjRef(obj)

        if (("Instance" == type || "@Instance" == type)) {
            val kind = json.get("kind")?.asString ?: return ObjRef(obj)
            if ("Null" == kind) return null
        }
        return ObjRef(obj)
    }

    /**
     * 保留路径中的对象。
     */
    fun getValue(): ObjRef {
        return ObjRef(json.get("value").asJsonObject)
    }
}
