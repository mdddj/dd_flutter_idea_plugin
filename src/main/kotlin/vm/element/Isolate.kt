/*
 * Copyright (c) 2015, the Dart project authors.
 *
 * Licensed under the Eclipse Public License v1.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
package vm.element

// This file is generated by the script: pkg/vm_service/tool/generate.dart in dart-lang/sdk.

import com.google.gson.JsonArray
import com.google.gson.JsonElement
import com.google.gson.JsonObject

/**
 * {@link Isolate} 是一个隔离的 Dart 执行上下文。
 */
class Isolate(json: JsonObject) : VMRef(json) {

    /**
     * 为此 isolate 注册的服务扩展 RPC 列表（如果有）。
     *
     * 可以返回 <code>null</code>。
     */
    fun getExtensionRPCs(): List<String>? {
        return if (json.get("extensionRPCs") == null) null else getListString("extensionRPCs")
    }

    /**
     * 传递给 getIsolate RPC 以重新加载此 isolate 的 ID。
     */
    fun getId(): String {
        return getAsString("id")!!
    }

    /**
     * 指定 isolate 是否由 VM 或嵌入器为内部使用而生成。如果为 `false`，
     * 则此 isolate 可能正在运行用户代码。
     */
    fun getIsSystemIsolate(): Boolean {
        return getAsBoolean("isSystemIsolate")
    }

    /**
     * 为此 isolate 提供的 isolate 标志列表。有关接受的 isolate 标志列表，请参见 dart_api.h 中的 Dart_IsolateFlags。
     */
    fun getIsolateFlags(): ElementList<IsolateFlag> {
        return object : ElementList<IsolateFlag>(json.get("isolateFlags").asJsonArray) {
            override fun basicGet(array: JsonArray, index: Int): IsolateFlag {
                return IsolateFlag(array.get(index).asJsonObject)
            }
        }
    }

    /**
     * 此 isolate 所属的 isolate 组的 ID。
     */
    fun getIsolateGroupId(): String {
        return getAsString("isolateGroupId")!!
    }

    /**
     * 此 isolate 的所有库的列表。
     *
     * 当 IsolateRunnable 事件触发时保证已初始化。
     */
    fun getLibraries(): ElementList<LibraryRef> {
        return object : ElementList<LibraryRef>(json.get("libraries").asJsonArray) {
            override fun basicGet(array: JsonArray, index: Int): LibraryRef {
                return LibraryRef(array.get(index).asJsonObject)
            }
        }
    }

    /**
     * 此 isolate 的活动端口数。
     */
    fun getLivePorts(): Int {
        return getAsInt("livePorts")
    }

    /**
     * 标识此 isolate 的名称。不保证唯一。
     */
    override fun getName(): String {
        return getAsString("name")!!
    }

    /**
     * 此 isolate 的数字 ID，表示为字符串。唯一。
     */
    fun getNumber(): String {
        return getAsString("number")!!
    }

    /**
     * 传递给 isolate 的最后一个暂停事件。如果 isolate 正在运行，这将是一个恢复事件。
     */
    fun getPauseEvent(): Event {
        return Event(json.get("pauseEvent").asJsonObject)
    }

    /**
     * 此 isolate 在退出时会暂停吗？
     */
    fun getPauseOnExit(): Boolean {
        return getAsBoolean("pauseOnExit")
    }

    /**
     * 此 isolate 的根库。
     *
     * 当 IsolateRunnable 事件触发时保证已初始化。
     *
     * 可以返回 <code>null</code>。
     */
    fun getRootLib(): LibraryRef? {
        val obj = json.get("rootLib")?.asJsonObject ?: return null
        val type = json.get("type")?.asString
        if ("Instance" == type || "@Instance" == type) {
            val kind = json.get("kind")?.asString
            if ("Null" == kind) return null
        }
        return LibraryRef(obj)
    }

    /**
     * isolate 是否处于可运行状态？
     */
    fun getRunnable(): Boolean {
        return getAsBoolean("runnable")
    }

    /**
     * VM 启动的时间，以纪元以来的毫秒数表示。
     *
     * 适合传递给 DateTime.fromMillisecondsSinceEpoch。
     */
    fun getStartTime(): Int {
        return getAsInt("startTime")
    }
}
